import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
import sqlite3
db = sqlite3.connect("../data/db.db")

TOKEN_API = "6662629827:AAHoIxMjnrbtSLX2W7Pw3ARqbAjf_xq8QbI"
bot1 = Bot(TOKEN_API)
voprosik = Router()

class voprstate(StatesGroup):
    nedel = State()
    days = State()
    urok = State()
    count_vopr = State()
    photo_id = State()

class voprvibral(StatesGroup):
    vopr= State()
    urok= State()
class voprdelete(StatesGroup):
    vopr= State()
    urok= State()


@voprosik.callback_query(F.data=="vopr_v_raspis")
async def rasp(callback: CallbackQuery,state:FSMContext):
    await callback.message.edit_text("–≤—ã–±–µ—Ä–∏—Ç–µ",reply_markup=vopr_v_raspis(flevel_admin(callback.message.chat.id)))
    t = callback.message.text
    await state.set_state(voprstate.nedel)
    await state.update_data(nedel=t[-9:-7])

@voprosik.callback_query(F.data=="—Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã vopr")
async def rasp(callback: CallbackQuery,state:FSMContext):
    if count_vopr_in_table(callback.message.chat.id)<=3000:
        await callback.message.edit_text(f"–≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å\n"
        f"–í–∞—à–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤({count_vopr_in_table(callback.message.chat.id)} –∏–∑ 3000)", reply_markup=day)
    else:
        await callback.message.edit_text("—É–¥–∞–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω",reply_markup=kBackmebu)


@voprosik.callback_query(F.data.in_({"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ vopr", "–≤—Ç–æ—Ä–Ω–∏–∫ vopr","—Å—Ä–µ–¥–∞ vopr", "—á–µ—Ç–≤–µ—Ä–≥ vopr", "–ø—è—Ç–Ω–∏—Ü–∞ vopr","—Å—É–±–±–æ—Ç–∞ vopr"}))
async def rasp(callback: CallbackQuery,state:FSMContext):
    t=callback.data
    print(t[:-5])
    await state.set_state(voprstate.days)
    await state.update_data(days=t[:-5])
    date1 = await state.get_data()
    await callback.message.edit_text("–≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–∫", reply_markup=fgen_spisok_para(callback.message.chat.id,date1["nedel"],date1["days"]))

@voprosik.callback_query(F.data[0]=="#")
async def rasp(callback: CallbackQuery,state:FSMContext):
    t=callback.data[1:]
    await state.set_state(voprstate.urok)
    print(t)
    await state.update_data(urok=t)
    await callback.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤(–º–µ–Ω—å—à–µ 120)", reply_markup=pr_colvo_vopr)
    await state.set_state(voprstate.count_vopr)

@voprosik.message(voprstate.count_vopr)
async def freg_name(message: Message, state:FSMContext):
    await state.update_data(count_vopr=message.text)
    await asyncio.sleep(5)
    await message.delete()

@voprosik.callback_query(F.data=="pr_colvo")
async def rasp(callback: CallbackQuery,state:FSMContext):
    date1 = await state.get_data()
    if int(date1["count_vopr"])<=120:
        await callback.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=prov_photo)
        await state.set_state(voprstate.photo_id)
    else:
        await callback.message.edit_text("—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ —á–∏—Å–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤", reply_markup=kBackmebu)
@voprosik.message(voprstate.photo_id)
async def freg_name(message: Message, state:FSMContext):
    p=(str(message.photo[-1])[9:])
    p1=p[:p.find("'")]
    await state.update_data(photo_id=p1)
    print(p1)
    await asyncio.sleep(5)
    await message.delete()




@voprosik.callback_query(F.data=="pr_photo")
async def rasp(callback: CallbackQuery,state:FSMContext):
    date1 = await state.get_data()
    await callback.message.edit_text(f"—Å–æ–∑–¥–∞–Ω–æ\n–Ω–µ–¥–µ–ª—è {date1['nedel']},\n—É—Ä–æ–∫ {date1['urok']},\n–∫–æ–ª-–≤–æ –≤–æ–ø—Ä–æ—Å–æ–≤ {date1['count_vopr']}", reply_markup=kBackmebu)
    sozdat_vopr(date1['nedel'],date1['urok'],date1['count_vopr'],date1['photo_id'],callback.message.chat.id)
# —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–æ–µ—Å—Ç—å –∫ —É—Ä–æ–∫—É –ø—Ä–∏–ø–∏—Å—ã–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥—ã–π –º–æ–∂–µ—Ç –∑–∞–±—Ä–∞—Ç—å
# —Ö–æ—Ç—å –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–æ —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –Ω–µ(1:–ê—Ä—Ç–µ–º,–ê—Ä—Ç–µ–º,–ê—Ä—Ç–µ–º.....)
# –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏(–Ω–æ–º–µ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –±—Ä–æ–Ω—å –∞–Ω—É–ª–∏—Ä—É–µ—Ç—Å—è)

@voprosik.callback_query(F.data[0]=="?")
async def rasp(callback: CallbackQuery,state:FSMContext):
    await callback.answer(callback.data[1:])
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={callback.message.chat.id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    photo_ = cursor.execute(f"""SELECT photo From {grope} WHERE urok=(?)""", (str(callback.data[1:]),)).fetchone()
    cursor = db.cursor()
    caption_ = cursor.execute(f"""SELECT vopros,chelovec From {grope} WHERE urok=(?)""", (str(callback.data[1:]),)).fetchall()
    cap="—Å–ø–∏—Å–æ–∫:\n"
    for vopr in caption_:
        cap+=f"{vopr[0]}:{vopr[1]}\n"
    cap+="\n–≤—ã–±–µ—Ä–∏—Ç–µ:"
    cap=cap.replace("None","")
    await callback.message.answer_photo(photo=photo_[0],
                                        reply_markup=vibor_vopr(callback.data[1:],callback.message.chat.id),
                                        caption=cap
                    )
    await state.clear()
    await state.set_state(voprvibral.urok)
    await state.update_data(urok=callback.data[1:])
    await state.set_state(voprvibral.vopr)

@voprosik.callback_query(voprvibral.vopr)
async def rasp(callback: CallbackQuery,state:FSMContext):
    date1 = await state.get_data()
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={callback.message.chat.id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    vibral = cursor.execute(f"""SELECT chelovec From {grope} WHERE vopros=(?) and urok=(?)""", (int(callback.data),str(date1["urok"]),)).fetchone()
    cursor = db.cursor()
    name = cursor.execute("""SELECT name From user WHERE tg_id=(?)""", (int(callback.message.chat.id),)).fetchone()
    #–≤—ã—Ç–∞—â–∏–ª –∏–∑ –º–∞—Å—Å–∏–≤–æ–≤
    name2 = name[0]
    vibral2 = vibral[0]
    if vibral2==None:
        vibral2=""
    print(vibral[0],name)
    # –æ–Ω –≤—ã–±–∏—Ä–∞–ª —É–∂–µ?
    if name2 in vibral2:
        #—É–¥–∞–ª–∏–ª –∏–∑ —Å–ø–∏—Å–∫–∞
        nameminus=vibral2.replace((name2+", "),"")
        cursor = db.cursor()
        udal = cursor.execute(f"""UPDATE {grope} SET chelovec=(?) WHERE vopros=(?) and urok=(?)""",
                              (nameminus,int(callback.data),str(date1["urok"]),)).fetchone()
        db.commit()
    else:
        #–¥–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫
        nameplus = vibral2+name2+", "
        cursor = db.cursor()
        dobav = cursor.execute(f"""UPDATE {grope} SET chelovec=(?) WHERE vopros=(?) and urok=(?)""",
                              (nameplus, int(callback.data), str(date1["urok"]),)).fetchone()
        db.commit()
    # –æ–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫
    cursor = db.cursor()
    caption_ = cursor.execute(f"""SELECT vopros,chelovec From {grope} WHERE urok=(?)""",
                              (str(date1["urok"]),)).fetchall()
    cap = "—Å–ø–∏—Å–æ–∫:\n"
    print(caption_)
    for vopr in caption_:
        cap += f"{vopr[0]}:{vopr[1]}\n"
    cap += "\n–≤—ã–±–µ—Ä–∏—Ç–µ:"
    cap = cap.replace("None", "")
    print(cap)
    await callback.message.edit_caption(caption=cap,reply_markup=vibor_vopr(date1["urok"],callback.message.chat.id))



@voprosik.callback_query(F.data=="–≤–æ–ø—Ä–æ—Å—ã vopr")
async def rasp(callback: CallbackQuery):
    await callback.message.edit_text("–≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã", reply_markup=gen_sozdanie_voprosi(callback.message.chat.id))

@voprosik.callback_query(F.data == "—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def reg_grope(callback: CallbackQuery):
    await callback.message.delete()

@voprosik.callback_query(F.data == "—É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å")
async def reg_grope(callback: CallbackQuery,state:FSMContext):
    await state.set_state(voprdelete.urok)
    await callback.message.edit_text("–≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å",
                                     reply_markup=gen_sozdanie_voprosi_delete(callback.message.chat.id))

@voprosik.callback_query(voprdelete.urok)
async def reg_grope(callback: CallbackQuery,state:FSMContext):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={callback.message.chat.id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    res1 = cursor.execute(f"""delete FROM {grope} WHERE urok=(?)""", (callback.data,))
    db.commit()
    await callback.message.edit_text("–≤–æ–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω",
                                     reply_markup=kBackmebu)
    await state.clear()












def flevel_admin(tg_id):
    cursor = db.cursor()
    res = cursor.execute("""SELECT admin From user WHERE tg_id=(?)""", (tg_id,)).fetchone()
    if res==None:
        return 0
    return res[0]


def vopr_v_raspis(level):
    if level>1:
        return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–≤–æ–ø—Ä–æ—Å—ã‚ùî",callback_data="–≤–æ–ø—Ä–æ—Å—ã vopr")],
                                                     [InlineKeyboardButton(text="—Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã‚ûï",callback_data="—Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã vopr")],
                                                     [InlineKeyboardButton(text="—É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ãüóë",callback_data="—É–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å")],
                                                        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è",callback_data="menu")]])
    else:
        return InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–≤–æ–ø—Ä–æ—Å—ã‚ùî",callback_data="–≤–æ–ø—Ä–æ—Å—ã vopr")],
                             [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è",callback_data="menu")]])


def fgen_spisok_para(tg_id,nedel,days):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope1 = grope+"_rasp"
    cursor = db.cursor()
    print(grope, nedel, days)
    res = cursor.execute(f"Select para FROM {grope1} WHERE grope='{grope}' and nedel={nedel} and day='{days}'").fetchall()
    print(res)
    c = []
    for g in res:
        c.append([InlineKeyboardButton(text=g[0], callback_data="#"+g[0])])
    c.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="menu")])
    print(c)
    gen_urok = InlineKeyboardMarkup(inline_keyboard=c)
    return gen_urok


def gen_sozdanie_voprosi_delete(tg_id):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    res = cursor.execute(f"Select get_data,urok FROM {grope}").fetchall()
    c = []
    b=[]
    for g in res:
        if g[1] in b:
            continue
        b.append(g[1])
        c.append([InlineKeyboardButton(text=f"{g[0]} –Ω–µ–¥–µ–ª—è {g[1]}", callback_data=g[1])])
    c.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="menu")])
    gen_vopr = InlineKeyboardMarkup(inline_keyboard=c)
    return gen_vopr
def gen_sozdanie_voprosi(tg_id):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    res = cursor.execute(f"Select get_data,urok FROM {grope}").fetchall()
    c = []
    b=[]
    for g in res:
        if g[1] in b:
            continue
        b.append(g[1])
        c.append([InlineKeyboardButton(text=f"{g[0]} –Ω–µ–¥–µ–ª—è {g[1]}", callback_data="?"+g[1])])
    c.append([InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è", callback_data="menu")])
    gen_vopr = InlineKeyboardMarkup(inline_keyboard=c)
    return gen_vopr
def sozdat_vopr(nedel,urok,count,photo,tg_id):
    cursor = db.cursor()
    grope = cursor.execute("""SELECT grope From user WHERE tg_id=(?)""", (tg_id,)).fetchone()[0]
    cursor = db.cursor()
    grope2 = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope2 += "_vopr"
    urok= f"{urok} {str(count)} –≤–æ–ø—Ä–æ—Å–æ–≤"
    for i in range(int(count)):
        print(i)
        i+=1
        cursor = db.cursor()
        res = cursor.execute(f"""INSERT INTO {grope2}(get_data,urok,vopros,photo,grope) VALUES((?),(?),(?),(?),(?))""",
                             (int(nedel),str(urok),i,str(photo),str(grope),))

    db.commit()
    pass
def count_vopr_in_table(tg_id):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope += "_vopr"
    cursor = db.cursor()
    count = cursor.execute(f"""SELECT COUNT (*) FROM {grope}""").fetchone()
    return count[0]


def vibor_vopr(urok,tg_id):
    cursor = db.cursor()
    grope = (cursor.execute(f"Select grope FROM user where tg_id={tg_id}").fetchone())[0]
    grope+="_vopr"
    cursor = db.cursor()
    vop = cursor.execute(f"Select vopros FROM {grope} where urok=(?)",(str(urok),)).fetchall()
    c = []
    b =[]
    re=0
    for g in vop:
        re+=1
        b.append((InlineKeyboardButton(text=str(g[0]), callback_data=str(g[0]))))
        if re==5:
            c.append(b)
            b=[]
            re=0
    c.append([InlineKeyboardButton(text="—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùå",callback_data="—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")])
    vibor_vopr = InlineKeyboardMarkup(inline_keyboard=c)
    return vibor_vopr



day = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",callback_data="–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ vopr")],
                                            [InlineKeyboardButton(text="–≤—Ç–æ—Ä–Ω–∏–∫",callback_data="–≤—Ç–æ—Ä–Ω–∏–∫ vopr")],
                                            [InlineKeyboardButton(text="—Å—Ä–µ–¥–∞",callback_data="—Å—Ä–µ–¥–∞ vopr")],
                                            [InlineKeyboardButton(text="—á–µ—Ç–≤–µ—Ä–≥",callback_data="—á–µ—Ç–≤–µ—Ä–≥ vopr")],
                                            [InlineKeyboardButton(text="–ø—è—Ç–Ω–∏—Ü–∞",callback_data="–ø—è—Ç–Ω–∏—Ü–∞ vopr")],
                                            [InlineKeyboardButton(text="—Å—É–±–±–æ—Ç–∞",callback_data="—Å—É–±–±–æ—Ç–∞ vopr")],
                                            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞",callback_data="menu")]])
kBackmebu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í—ã–π—Ç–∏‚Ü©Ô∏è", callback_data="menu")]])
pr_colvo_vopr = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å‚úÖ", callback_data="pr_colvo")],
                                            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è",callback_data="menu")]])
prov_photo = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å‚úÖ", callback_data="pr_photo")],
                                            [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞‚Ü©Ô∏è",callback_data="menu")]])