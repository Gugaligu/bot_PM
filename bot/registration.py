import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import Bot
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
import sqlite3
import menu
db = sqlite3.connect("../data/db.db")

TOKEN_API = "7503899100:AAEcNx9fksbRf2pjOfIRLXf6ZtaLT0fb6BU"
bot1 = Bot(TOKEN_API)
registration = Router()

class registrationclass(StatesGroup):
    name=State()
    grope=State()
class set_grop(StatesGroup):
    grope=State()

@registration.message(CommandStart())
async def Start(message: Message):
    if fprov_registration(message.chat.id):
        await message.answer(
            fmenu(message.chat.id, message.chat.first_name, message.chat.username),
            reply_markup=menu.fkmenu(message.chat.id))
    else:
        await message.answer("„Ö§„Ö§–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å\n"
                             "===========‚Üì===========",
                             reply_markup=kreg)
    await message.delete()

@registration.callback_query(F.data=="reg")
async def Filterr(callback: CallbackQuery,state:FSMContext):
    if fprov_registration(callback.message.chat.id):
        await callback.message.edit_text(
            fmenu(callback.message.chat.id, callback.message.chat.first_name, callback.message.chat.username),
            reply_markup=menu.fkmenu(callback.message.chat.id))
    else:
        await state.set_state(registrationclass.name)
        await callback.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–µ –∏–º—è\n"
                                     "1)–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –¥–æ 11 —Å–∏–º–≤–æ–ª–æ–≤\n"
                                     "2)–∏–º—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç–æ —Ç–∞–∫-—á—Ç–æ –ø–∏—à–∏—Ç–µ —Å —Ñ–∞–º–∏–ª–∏–µ–π\n\n"
                                     "–ù–∞–ø—Ä–∏–º–µ—Ä:–ê–±–æ–±–∏–∫—Å –í.\n\n"
                                     "(—Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏ —É–¥–∞–ª–µ–Ω–æ, –Ω–µ –ø—É–≥–∞–π—Ç–µ—Å—å!)",
                                     reply_markup=kreg_name)

@registration.message(registrationclass.name)
async def freg_name(message: Message, state:FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(registrationclass.grope)
    await asyncio.sleep(5)
    await message.delete()

@registration.callback_query(F.data=="–∞–≤—Ç–æ")
async def Filterr(callback: CallbackQuery,state:FSMContext):
    await state.update_data(name=callback.message.chat.first_name)
    data = await state.get_data()
    await callback.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ "+data["name"]+"\n–≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ(–∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è)",
                                     reply_markup=fgen_spisok_grop())
    await state.set_state(registrationclass.grope)
    print(callback.message.chat.id)

@registration.callback_query(F.data=="reg_name")
async def Filterr(callback: CallbackQuery,state:FSMContext):
    data = await state.get_data()
    await callback.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ "+data["name"]+"\n–≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ(–∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç—Å—è)",
                                     reply_markup=fgen_spisok_grop())
    await state.set_state(registrationclass.grope)

@registration.callback_query(registrationclass.grope)
async def reg_grope(callback: CallbackQuery, state: FSMContext):
    if callback.data!="+–î–û–ë –ì–†–£–ü–ü–£":
        await state.update_data(grope=callback.data)
        data = await state.get_data()
        if (fname_in_db(str(data["name"]))) and ("#" not in str(data["name"])) and ("|" not in str(data["name"])) and (")" not in str(data["name"])) and ("(" not in str(data["name"])) and len(str(data["name"]))<=13:
            fregistration(callback.message.chat.id, data["name"], data["grope"])

            await callback.message.edit_text(
                fmenu(callback.message.chat.id, callback.message.chat.first_name, callback.message.chat.username),
                reply_markup=menu.fkmenu(callback.message.chat.id))
        else:
            await callback.message.edit_text(data["name"] + "-—ç—Ç–æ –∏–º—è –∑–∞–Ω—è—Ç–æ, —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã",
                                             reply_markup=kBackmebu)
        await state.clear()
    else:
        await state.clear()
        await state.set_state(set_grop.grope)
        await callback.message.edit_text("–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ —Å–∫–æ–±–∫–∞—Ö\n–ø—Ä–∏–º–µ—Ä:(PM2) –∏–ª–∏ (–ü–ú2)", reply_markup=sozd_grop)



@registration.message(set_grop.grope)
async def freg_name(message: Message, state: FSMContext):
    await state.update_data(grope=message.text)
    await asyncio.sleep(5)
    await message.delete()

@registration.callback_query(F.data=="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")
async def reg_grope(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data["grope"])
    if (")" in data["grope"]) and ("(" in data["grope"]):
        await callback.message.edit_text("–∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∏ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ –¥–Ω—è\n(–º–∏–Ω–∏–º–∞–ª—å–Ω–æ —á–∞—Å) –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ",reply_markup=kBackmebu)
        await bot1.send_message(chat_id="1442714637", text=f'—Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É{data["grope"]} –æ—Ç |{callback.message.chat.first_name}|{callback.message.chat.username} id#{callback.message.chat.id}#',reply_markup=prow_sozd)
        print(f'—Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É{data["grope"]} –æ—Ç |{callback.message.chat.first_name}|{callback.message.chat.username} id#{callback.message.chat.id}#')
    else:
        await callback.message.edit_text("–í –°–ö–û–ë–ö–ê–• –ì–†–£–ü–ü–£!",reply_markup=kBackmebu)
    await state.clear()


@registration.callback_query(F.data=="—Ä–∞–∑—Ä–µ—à–∏—Ç—å prow sozd")
async def reg_grope(callback: CallbackQuery):
    t=callback.message.text
    grope=t[t.find("(")+1:t.find(")")]
    name=t[t.find("|")+1:t.rfind("|")]
    fsozdat_gr_po_razr(grope)
    c = callback.message.text
    ct=c[c.find("#")+1:c.rfind("#")]
    cursor = db.cursor()
    res = cursor.execute("""INSERT INTO user(tg_id,name,admin,grope) VALUES((?),(?),(?),(?))""", (ct, name, 2, grope,))
    db.commit()
    await bot1.send_message(chat_id=str(ct),
                            text=f'–≥—Ä—É–ø–ø–∞ —Å–æ–∑–¥–∞–Ω–∞!',
                            reply_markup=udal_soob)
    await callback.message.delete()

@registration.callback_query(F.data == "–∑–∞–ø—Ä–µ—Ç–∏—Ç—å prow sozd")
async def reg_grope(callback: CallbackQuery):
    await callback.message.delete()

@registration.callback_query(F.data == "—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def reg_grope(callback: CallbackQuery):
    await callback.message.delete()

def fmenu(id,first_name,username):
    cursor = db.cursor()
    res = cursor.execute("""SELECT * From user WHERE tg_id=(?)""", (id,)).fetchone()
    return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—åüë§\n" \
           f"–ò–º—è:{res[2]}\n" \
           f"–ò–º—è –≤ —Ç–≥:{first_name}({username})\n" \
           f"–≥—Ä—É–ø–ø–∞:{res[4]}\n" \
           f"—Å—Ç–∞—Ç—É—Å:{fnazvanie_admina(res[1])}\n" \
           f"====================\n" \
           f"„Ö§„Ö§–ú–µ–Ω—é —Ñ—É–Ω–∫—Ü–∏–π"
def fprov_registration(id):
    cursor = db.cursor()
    res = cursor.execute("""SELECT tg_id From user WHERE tg_id=(?)""", (id,)).fetchone()
    return res != None
def flevel_admin(id):
    cursor = db.cursor()
    res = cursor.execute("""SELECT admin From user WHERE tg_id=(?)""", (id,)).fetchone()
    if res==None:
        return 0
    return res[0]

def fname_in_db(name):
    cursor = db.cursor()
    res = cursor.execute("""SELECT name From user WHERE name=(?)""", (name,)).fetchone()
    if res==None:
        return True
    else:
        return False

def fregistration(id, name, grope):
    cursor = db.cursor()
    res = cursor.execute("""INSERT INTO user(tg_id,name,grope) VALUES((?),(?),(?))""", (id,name,grope,))
    db.commit()
    pass
def fnazvanie_admina(id):
    level=flevel_admin(id)
    if level == 0:
        return "–Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω"
    elif level==1:
        return "—É—á–µ–Ω–∏–∫"
    elif level == 2:
        return "—Å—Ç–∞—Ä–æ—Å—Ç–∞"
    elif level==3:
        return "—Å–æ–∑–¥–∞—Ç–µ–ª—å"
    else:
        return "–Ω–µ—Ç —Ç–∞–∫–æ–≥–æ"

def fgen_spisok_grop():
    cursor = db.cursor()
    res = cursor.execute("Select gr FROM spisokgrop").fetchall()
    print(res)
    c = []
    for g in res:
        c.append([InlineKeyboardButton(text=g[0], callback_data=g[0])])
    c.append([InlineKeyboardButton(text="‚ûï", callback_data="+–î–û–ë –ì–†–£–ü–ü–£")])
    c.append([InlineKeyboardButton(text="–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è",callback_data="menu")])
    kgrope = InlineKeyboardMarkup(inline_keyboard=c)
    return kgrope

def fsozdat_gr_po_razr(grope):
    cursor = db.cursor()
    res = cursor.execute(f"""INSERT INTO spisokgrop(gr) VALUES("{grope}")""")
    cursor = db.cursor()
    res1 = cursor.execute(f"""CREATE TABLE {grope}_rasp (
                                            id       INTEGER PRIMARY KEY AUTOINCREMENT,
                                            nedel    INTEGER NOT NULL,
                                            day      TEXT    NOT NULL,
                                            para     TEXT    NOT NULL
                                                                     DEFAULT [ ],
                                            grope    TEXT    NOT NULL,
                                            nomerpar INTEGER NOT NULL,
                                            data     TEXT    NOT NULL
                                                                        );""")
    cursor = db.cursor()
    res2 = cursor.execute(f"""CREATE TABLE {grope}_vopr (
                                            id       INTEGER PRIMARY KEY AUTOINCREMENT,
                                            get_data INTEGER NOT NULL,
                                            urok     TEXT    NOT NULL,
                                            vopros   INTEGER,
                                            chelovec TEXT,
                                            photo    TEXT    NOT NULL,
                                            grope    TEXT    NOT NULL
                                                                        );""")
    db.commit()

kreg = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",callback_data="reg")]])

kreg_name = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º—è ‚úÖ",callback_data="reg_name")],
                                                [InlineKeyboardButton(text="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏-–∏–º—è –≤ —Ç–≥",callback_data="–∞–≤—Ç–æ")],
                                                 [InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚Ü©Ô∏è",callback_data="menu")]])

kBackmebu = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–í—ã–π—Ç–∏ ‚Ü©Ô∏è",callback_data="menu")]])

sozd_grop = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É‚úÖ",callback_data="–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É")],
                                                 [InlineKeyboardButton(text="–Ω–∞–∑–∞–¥ ‚Ü©Ô∏è",callback_data="menu")]])
prow_sozd= InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="—Ä–∞–∑—Ä–µ—à–∏—Ç—å‚úÖ",callback_data="—Ä–∞–∑—Ä–µ—à–∏—Ç—å prow sozd")],
                                                 [InlineKeyboardButton(text="–∑–∞–ø—Ä–µ—Ç–∏—Ç—å‚ùå",callback_data="–∑–∞–ø—Ä–µ—Ç–∏—Ç—å prow sozd")]])
udal_soob=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ‚ùå",callback_data="—É–±—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]])